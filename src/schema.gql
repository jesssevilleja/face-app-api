# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AdminTransaction {
  adminNote: String
  amount: Float!
  createdAt: DateTime!
  credits: Int!
  description: String
  id: ID!
  multiplier: Int!
  packageType: String
  paymentProvider: PaymentProvider
  processedAt: DateTime
  processedBy: String
  status: TransactionStatus!
  transactionId: String
  type: TransactionType!
  updatedAt: DateTime!
  userEmail: String!
  userId: String!
  userName: String!
  walletId: String!
}

type AdminTransactionConnection {
  hasMore: Boolean!
  totalCount: Int!
  transactions: [AdminTransaction!]!
}

input AllFacesInput {
  limit: Int! = 10
  page: Int! = 1
  searchTerm: String
  sortBy: String
  sortOrder: String
  userId: String
}

input AllUsersInput {
  limit: Int! = 10
  page: Int! = 1
  searchTerm: String
  sortBy: String
  sortOrder: String
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Category {
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  isParent: Boolean!
  name: String!
  parentCategory: Category
  updatedAt: DateTime!
}

input ConfirmPaymentInput {
  transactionId: String!
}

input CreateFaceInput {
  accessories: String
  expression: String
  imageUrl: String!
  makeup: String
  name: String!
  productsUsed: [String!]
  style: String
}

input CreatePaymentIntentInput {
  multiplier: Int = 1
  packageType: String!
  paymentProvider: PaymentProvider!
  transactionId: String!
}

input CreateProductInput {
  categoryId: String!
  description: String!
  imageUrl: String!
  isPopular: Boolean
  name: String!
  price: Int!
}

input CreateTodoInput {
  description: String
  title: String!
}

input CreateUserInput {
  email: String!
  googleId: String
  isGoogleAccount: Boolean
  name: String!
  password: String
  profilePicture: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeductCreditsResponse {
  newBalance: Int!
  success: Boolean!
}

type Face {
  accessories: String
  createdAt: DateTime
  expression: String
  id: ID!
  imageUrl: String!
  isLiked: Boolean
  isViewed: Boolean
  likes: Int!
  makeup: String
  name: String!
  productsUsed: [String!]
  style: String
  updatedAt: DateTime
  userId: String!
  views: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  confirmPayment(input: ConfirmPaymentInput!): Boolean!
  createFace(input: CreateFaceInput!): Face!
  createPaymentIntent(input: CreatePaymentIntentInput!): PaymentIntent!
  createProduct(input: CreateProductInput!): Product!
  createTodo(input: CreateTodoInput!): Todo!
  deductCredits(amount: Int!, description: String!): DeductCreditsResponse!
  deleteFace(id: ID!): Boolean!
  deleteProduct(id: String!): Boolean!
  deleteTodo(id: ID!): Boolean!
  incrementFaceView(faceId: ID!): Face!
  login(input: LoginInput!): AuthResponse!
  logout: Boolean!
  processTransaction(input: ProcessTransactionInput!): Boolean!
  purchaseProduct(productId: String!): PurchaseResponse!
  refreshTokens(refreshToken: String!, userId: String!): AuthResponse!
  signup(input: CreateUserInput!): AuthResponse!
  toggleFaceLike(faceId: ID!): Face!
  updateFace(id: ID!, input: UpdateFaceInput!): Face!
  updateProduct(id: String!, input: UpdateProductInput!): Product!
  updateTodo(id: ID!, input: UpdateTodoInput!): Todo!
  updateUser(input: UpdateUserInput!): User!
}

type PaymentIntent {
  gcashPaymentId: String
  paypalOrderId: String
  qrCode: String
  transactionId: String!
}

type PaymentPackage {
  allowMultiple: Boolean!
  credits: Int!
  description: String!
  id: String!
  name: String!
  price: Float!
}

enum PaymentProvider {
  GCASH
  PAYPAL
}

input ProcessTransactionInput {
  action: TransactionAction!
  adminNote: String
  transactionId: String!
}

type Product {
  category: Category!
  createdAt: DateTime!
  description: String!
  id: ID!
  imageUrl: String!
  isActive: Boolean!
  isPopular: Boolean!
  name: String!
  price: Int!
  rating: Float!
  updatedAt: DateTime!
}

type PurchaseResponse {
  message: String!
  newBalance: Int!
  success: Boolean!
}

type Query {
  adminProducts: [Product!]!
  adminTransactions(limit: Int = 20, offset: Int = 0, status: String): AdminTransactionConnection!
  allFaces(input: AllFacesInput!): [Face!]!
  allUsers(input: AllUsersInput!): [UserStats!]!
  categories: [Category!]!
  face(id: ID!): Face
  me: User!
  myWallet: Wallet!
  parentCategories: [Category!]!
  paymentPackages: [PaymentPackage!]!
  products(categoryId: String, search: String): [Product!]!
  todo(id: ID!): Todo
  todos(limit: Int = 10, offset: Int = 0, search: String, sortOrder: String, status: String): TodoConnection!
  transactionHistory(limit: Int = 10, offset: Int = 0): [Transaction!]!
  transactionStats: TransactionStats!
  user(id: ID!): User
  userProducts: [UserProduct!]!
}

type Todo {
  completed: Boolean!
  createdAt: DateTime!
  description: String
  id: ID!
  title: String!
  updatedAt: DateTime!
  userId: String!
}

type TodoConnection {
  hasMore: Boolean!
  todos: [Todo!]!
  totalCount: Int!
}

type Transaction {
  amount: Float!
  createdAt: DateTime!
  credits: Int!
  description: String
  id: ID!
  multiplier: Int!
  packageType: String
  paymentProvider: PaymentProvider
  status: TransactionStatus!
  transactionId: String
  type: TransactionType!
  updatedAt: DateTime!
  userId: String!
  walletId: String!
}

enum TransactionAction {
  APPROVE
  REJECT
}

type TransactionStats {
  completedTransactions: Int!
  pendingRevenue: Float!
  pendingTransactions: Int!
  rejectedTransactions: Int!
  totalRevenue: Float!
  totalTransactions: Int!
}

enum TransactionStatus {
  CANCELLED
  COMPLETED
  FAILED
  PENDING
  REJECTED
}

enum TransactionType {
  DEBIT
  DEPOSIT
}

input UpdateFaceInput {
  accessories: String
  expression: String
  imageUrl: String
  makeup: String
  name: String
  productsUsed: [String!]
  style: String
}

input UpdateProductInput {
  categoryId: String
  description: String
  imageUrl: String
  isActive: Boolean
  isPopular: Boolean
  name: String
  price: Int
}

input UpdateTodoInput {
  completed: Boolean
  description: String
  title: String
}

input UpdateUserInput {
  name: String
  profilePicture: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  profilePicture: String
  role: UserRole!
  updatedAt: DateTime!
}

type UserProduct {
  createdAt: DateTime!
  id: ID!
  isUsed: Boolean!
  product: Product!
  purchaseDate: DateTime!
  updatedAt: DateTime!
}

enum UserRole {
  ADMIN
  USER
}

type UserStats {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  profilePicture: String
  role: UserRole!
  totalFaces: Int!
  totalLikes: Int!
  totalViews: Int!
  updatedAt: DateTime!
}

type Wallet {
  createdAt: DateTime!
  credits: Int!
  id: ID!
  updatedAt: DateTime!
  userId: String!
}